#!/usr/bin/env node

/**
 * NodeJs script to create a systemd boot entry by copying an existing entry
 * and writing a new entry with the optimus-manager startup option set to nvidia.
 * 
 * @author https://github.com/cribac
 * @version 0.4.0
 */
const FS = require('fs/promises')

// the entries of systemd boot 
const BOOT_ENTRIES_PATH = '/efi/loader/entries'
// the end part of the file we want to copy
const FILE_ENDING = '.conf'
// the end part of the file we want to create
const FILE_COPY_ENDING = 'performance.conf'
// the existing keys of a systemd boot entry file
const KEYS = [
  'title',
  'version',
  'machine-id',
  'sort-key',
  'options',
  'linux',
  'initrd'
]

async function deleteOldEntry() {
  try {
    const fileToDelete = await findFile(FILE_COPY_ENDING, true)
    if (fileToDelete) {
      console.log(`Deleting old entry: ${fileToDelete}\n`)
      await FS.rm(`${BOOT_ENTRIES_PATH}/${fileToDelete}`)
    } else {
      console.log('Nothing to delete!\n')
    }
    console.log('...done!\n')
  } catch (err) {
    logAndDie(err)
  }
}

/**
 * @param {String} ending 
 */
async function findFile(ending, forDelete = false) {
  try {
    const files = await FS.readdir(BOOT_ENTRIES_PATH)
    if (forDelete) {
      return files.find((f) => f.endsWith(ending))
    }
    return files.find((f) => f.endsWith(ending) && f.includes('arch') && !f.includes('fallback') && !f.includes('performance'))
  } catch (err) {
    logAndDie(err)
  }
}

/**
 * @param {import('fs').PathLike} file 
 */
async function readFile(file) {
  try {
    const data = await FS.readFile(`${BOOT_ENTRIES_PATH}/${file}`, { encoding: 'utf-8' })
    return data
  } catch (err) {
    logAndDie(err)
  }
}

/**
 * @param {Object} options 
 */
async function createOutputFile(options) {
  try {
    for (let [key, value] of Object.entries(options)) {
      await FS.appendFile(`${BOOT_ENTRIES_PATH}/${fileCopyName()}`, `${key} ${value}\n`)
    }
  } catch (err) {
    logAndDie(err)
  }
}

/**
 * @returns String ex: "2-18-2023"
 */
function buildDateString() {
  const d = new Date()
  return `${d.toLocaleDateString().replace(/\//g, '-')}`
}

/**
 * @returns String
 */
function fileCopyName() {
  return `${buildDateString()}-${FILE_COPY_ENDING}`
}

/**
 * @param {Array<String>} lines 
 * @returns {Array<String>}
 */
function getSanitizedLines(lines) {
  const filteredLines = lines.filter(Boolean)
  const sanitizedLines = []
  filteredLines.forEach((line, idx) => {
    if (line.includes(KEYS[idx])) {
      const sanitizedLine = line.replace(KEYS[idx], '')
      sanitizedLines.push(sanitizedLine.trim())
    }
  })
  return sanitizedLines
}

/**
 * @param {Array<String>} sanitizedLines 
 * @returns Object
 */
function buildOutputOptions(sanitizedLines) {
  const output = {}
  KEYS.forEach((key, idx) => {
    output[key] = `${sanitizedLines[idx]}`
    if (key === 'title') {
      output['title'] = `${sanitizedLines[0]} (${sanitizedLines[1]} ${buildDateString()} Nvidia)`
    }
    if (key === 'options') {
      output['options'] = `${sanitizedLines[4]} optimus-manager.startup=nvidia`
    }
  })
  return output
}

function isCurrentUserRoot() {
  return process.getuid() === 0 // UID 0 is always root
}

function logAndDie (error) {
  console.error(error)
  process.exit(1)
} 

async function main() {
  if (isCurrentUserRoot()) {

    await deleteOldEntry()

    const originalFile = await findFile(FILE_ENDING)
    const originalFileContent = await readFile(originalFile)
    const originalLines = originalFileContent.split(/\r?\n/)
    const sanitizedLines = getSanitizedLines(originalLines)
    const newOptions = buildOutputOptions(sanitizedLines)

    try {
      console.log('Creating a new boot entry\n')
      await createOutputFile(newOptions)
      console.log('...done!\n')
    } catch (err) {
      logAndDie(err)
    }
  } else {
    console.log('Script must me run as root user!\n')
    process.exit(1)
  }
}

main()
